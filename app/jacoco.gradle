apply plugin: 'jacoco'

ext {
    coverageSourceDirs = 'src/test/java'
}

jacoco {
    toolVersion = "0.7.5.201505241946"
    reportsDir = file("$buildDir/reports")
}

//dependsOn: "testDebugUnitTest"

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', 'ru/mail/polis/ui/fragments', 'ru/mail/polis/exceptions', 'ru/mail/polis/list', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec',
                                                               'outputs/code_coverage/debugAndroidTest/connected/**/*.ec']))
}


tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}